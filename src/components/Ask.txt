<script setup lang="ts">
import {onMounted, onBeforeUnmount} from 'vue';
import {ref} from 'vue'
import {Position} from "@element-plus/icons-vue";

// const list = sessionStorage.getItem('list') ? ref(JSON.parse(sessionStorage.getItem('list'))) :
//     ref([
//   // 示例聊天数据
//   {id: 1, cont: "你好，我是慢病患者健康状况管理系统的智能问答助手。"},
//   {id: 1, cont: "请问有什么可以帮助你的吗？"},
//   {id: 2, cont: "我想了解一下糖尿病的相关知识。"},
// ]);

const list = sessionStorage.getItem('list') ? ref(JSON.parse(sessionStorage.getItem('list'))) :
  ref([
     {id: 1, cont: "你好，我是慢病患者健康状况管理系统的智能问答助手。有什么可以帮助您的吗？"},
])

const response_message = ref(''); // 机器人回答的问题
const query = ref(''); // 用户输入的问题
const response_message_pointer = ref(0); // 机器人回答的问题指针
let socket; // 存储websocket对象
const updateKey = ref(0);
const receiveMessage = ref(''); // 接收到的消息

const connectWenSocket = () => {
  socket.onopen = () => {
    console.log('连接成功');
    list.value.push({id: 1, cont: response_message.value}); // 将机器人回答的问题添加到聊天列表
    response_message.value = ''; // 清空机器人回答的问题
    response_message_pointer.value = list.value.length - 1; // 机器人回答的问题指针指向最后一个
    socket.send(JSON.stringify(list.value));
    window.scrollTo(0, document.documentElement.scrollHeight); // 滚动到底部
  };
  socket.onmessage = (event) => {
    const data = event.data
    console.log('收到消息', data);
    receiveMessage.value += data;
    console.log('111',marked.parse(receiveMessage.value));
    list.value[response_message_pointer.value].cont = marked.parse(receiveMessage.value); // 拼接机器人回答的问题
    window.scrollTo(0, document.documentElement.scrollHeight); // 滚动到底部
  };
  socket.onclose = () => {
    console.log('连接关闭');
    sessionStorage.setItem('list', JSON.stringify(list.value)); // 将聊天列表存储到sessionStorage
    window.scrollTo(0, document.documentElement.scrollHeight);
  };
  socket.onerror = () => {
    console.log('连接出错');
  };
};

const handleBackButton = ({canGoBack}) => {
  if (canGoBack) {
    window.history.back();
  }
};

const sendMessage = async () => {
  if(query.value === '') {
    return;
  }

  list.value.push({id: 2, cont: query.value}); // 将用户输入的问题添加到聊天列表
  sessionStorage.setItem('list', JSON.stringify(list.value)); // 将聊天列表存储到sessionStorage
  updateKey.value += 1; // 更新key值，触发组件重新渲染
  query.value = ''; // 清空用户输入的问题
  // 每次发送问题 都是一个新的websocket请求
  socket = new WebSocket(SERVER_DOMAIN2+'/api/model');
  connectWenSocket();
  // if (socket && socket.readyState === WebSocket.OPEN) {
  //   console.log(1)
  //   socket.send(JSON.stringify(list.value));
  //   console.log('发送消息', query.value);
  //   query.value = '';
  // } else {
  //   console.log('连接未建立');
  // }
}

onMounted(async () => {
  await App.addListener('backButton', handleBackButton);
  await initPage();
});

onBeforeUnmount(() => {
  App.removeAllListeners();
});
const back = () => {
  if (this.expsions) {
    this.expsions = false
  }
}
</script>

<template>
  <div class="body">
  <el-container>
    <el-header style="height: 7%;background: rgb(197.7, 225.9, 255);">
      <div class="Header">智能问答助手</div>
    </el-header>

    <div>
      <div>




        <div class="content" id="MyCenter" @click="back"
             style="min-height: 80vh" :key="updateKey">
          <ul class="pop__clearfix" v-for="(message,index) in list" :key="index">
            <!-- 用户 -->
            <li class="pop__chat-msg-me" v-if="message.id === 2">
              <div class="pop__chat-msg-content">
                <div class="pop__chat-msg-msg" v-if="message.cont"><span>{{ message.cont }}</span></div>
              </div>
              <span class="pop__chat-msg-avatar">
                <img src="../../static/image/person.jpg" alt="person.jpg" style="width: 10vw;height: 10vw">
              </span>
            </li>
            <!-- 机器人 -->
            <li class="pop__chat-msg-me2" v-if="message.id === 1">
              <span class="pop__chat-msg-avatar">
                <img src="../../static/image/icons8-博特-80.png" alt="icons8-博特-80.png" style="width: 10vw;height: 10vw">
              </span>
              <div class="pop__chat-msg-content2">
                <div class="pop__chat-msg-msg2" v-if="message.cont"><span><div v-html="message.cont"></div></span></div>
              </div>
            </li>
          </ul>
        </div>
      </div>
    </div>
    <el-footer>
      <div class="the-input-box">
        <el-input class="input-text"
                  type="textarea"
                  :autosize="{ minRows: 2, maxRows: 4}"
                  placeholder="请输入内容"
                  v-model="query" clearable>
        </el-input>

        <el-button class="send-button" type="primary" circle @click="sendMessage">
          <el-icon>
            <Position/>
          </el-icon>
        </el-button>
      </div>
    </el-footer>
  </el-container>
  </div>
</template>
<style>
.input-text {
  margin: 1.5vh auto;
  margin-left: 3vw;
  width: 77vw;
}

.send-button {
  scale: 2;
  position: fixed;
  right: 6vw;
  bottom: 3vh;
}

.the-input-box {
  position: fixed;
  bottom: 0;
  left: 0;
  width: 100vw;
  background-color: rgb(209.4, 236.7, 195.9);
}

.Header {
  text-align: center;
  font-size: x-large;
}

.pop__chat-msg-avatar {
  display: block;
  overflow: hidden;
  height: 10vw;
  width: 10vw;
  border-radius:10%;
}

.pop__chat-msg-content {
  width: 80vw;
  display: flex;
  justify-content: flex-end;
}

.pop__chat-msg-me {
  display: flex;
  margin-bottom: .72rem;
  margin-right: 2vw;
  float: right;
}

.pop__chat-msg-msg {
  background-color: rgb(179, 224.5, 156.5);
  border-color: rgb(179, 224.5, 156.5);
  border-style: solid;
  border-width: 1vw;
  border-radius: .7rem;
  color: #333;
  float: left;
  font-size: 1rem;
  margin: 1vw;
  padding: 1vw 1vh;
  max-width: 100vw;
  position: relative;
  white-space: pre-wrap;
}

.pop__clearfix {
  list-style: none;
  margin-left: 2vw;
  padding: 0;
}

.pop__clearfix:after {
  content: "";
  clear: both;
  display: block;
}

.pop__chat-msg-me2 {
  display: flex;
  margin-bottom: .36rem
}

.pop__chat-msg-content2 {
  width: 80vw;
}

.pop__chat-msg-msg2 {
  background-color: #fff;
  border-color: #fff;
  border-style: solid;
  border-width: 1vw;
  border-radius: .7rem;
  color: #333;
  float: left;
  font-size: 1rem;
  margin: 1vw;
  padding: 1vw 1vh;
  max-width: 100vw;
  position: relative;
  white-space: pre-wrap;
}

.content {
  background: #F2F2F2;
  padding: 0.2rem;
  overflow: scroll;
  box-sizing: border-box;
  padding-bottom: 0.8rem;
}

strong {
  font-weight: 600;
}
</style>